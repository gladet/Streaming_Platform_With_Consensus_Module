Compile: 
javac server.java 
javac client.java

Commands to start the server and client programs:
java server [server name]
java client [client name]
input [quit] to quit the client program

- implemented all the commands of P2 including: add/delete, create/remove, subscribe/unsubscribe, publish, get
- passed the test case of P2 instruction (screen shot image included in the submission)
- backup info/data of each server on its backup server (topics stored in the bkpTopics of the backup server)
- relocate partitions when servers added to/deleted from the stream platform
- the crashed/killed server can be restarted and reconnected to the stream platform (and all the clients) by input the start command: java server [server name] (should use the same [server name] as before) 
- using multi-threads on both the server and client side, the streaming platform runs via server-client and server-server socket communication.

Java files:
- server.java: where main method of the server program located at, receives commands from clients and dispatches the tasks to the server threads
- ServerThread.java: main body of the stream platform, the server threads handle the commands from clients  
- client.java: where main method of the client program located at, receives commands from user and sends them to the servers for processing
- ClientThread.java: client thread to handle messages sent from the servers (to connect to the restarted and newly added servers, disconnect to the deleted servers, display subscribed partitions, etc) 
- Record.java: <key, value> pair structure
- ServerInfo.java: record the server name, ip and port number, info is wrote into local file [serversInfo]
- ClientInfo.java: record the client name, ip and port number, info is wrote into local file [clientsInfo]
- SvrData.java: store the data and info used by the server, the data and info are wrote into local files [server name]_data/info

Files generated by the server programs are stored in [/tmp/92476/stream] (you can change the path as you like by replace the dir string [localDir] in server.java/client.java/ServerThread.java) of both machines, the program set the file access mode to 777 by calling [Runtime.getRuntime().exec("chmod 777 " + outFileName);]
1. serversInfo: record the name, ip address and port number of the servers added to the stream platform.
2. clientsInfo: record the name, ip address and port number of the clients connected to the stream platform.
3. [server name]_data: record the topics/backup topics data generated by the stream platform, including topic name, partition number, records in each partition
4. [server name]_info: record the relationships among topics, servers, clients. 
- [now] now of each partition of each topic (now is the number of records in each partition)
- [offset] offset of each partition of each topic (offset is the current record index of each partition to be accessed by the subscriber when calling [get] command)
- [numSub] number of subscribers of each topic
- [subList] subscribers of each topic
- [partSubMap] subscriber (client name) of each partition of each topic
- [partSvrMap] server name where each partition of each topic locates at
- [svrPartMap] the partitions of topics located on the server

BUG: Cannot correctly display the ip address of the server. 
CAUSE: The ip address of servers can be correctly displayed by calling the getLocalHost() method of [InetAddress] class. This method works on 104.130.67.11. However, calling getLocalHost() method on 23.253.20.67 caused the IOException of server program. So I had to switch to getHostAddress() but the ip address returned by this method was always 0.0.0.0.

I can use line 30 to display correct ip address on my own laptop as well as 104.130.67.11. However, I have to switch to line 29 on 23.253.20.67 and the displayed ip address is always 0.0.0.0.
line 29/30 @ server.java
[line 29]: System.out.println("DEBUG: " + localServerName + " at IP address " + serverSocket.getInetAddress().getHostAddress() + " and port number: " + serverSocket.getLocalPort());
[line 30]: //System.out.println("DEBUG: " + localServerName + " at IP address " + serverSocket.getInetAddress().getLocalHost().getHostAddress() + " and port number: " + serverSocket.getLocalPort());


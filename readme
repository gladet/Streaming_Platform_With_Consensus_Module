Compile: 
javac *.java

Commands to start the server and client programs:
java server [server name]
java client [client name]

Other commands: 
- input [quit] to quit the client program
- there is a file named [serversInfo] in directory [/home/92476/prog/stream]. If this file already exists (because you had already run the server program before and then killed it, but after that you didn’t manually delete [serversInfo]), the server program would ask you if you want to restart by accessing the servers info previously recorded in [serversInfo]. Here I recommend if you don’t intentionally want to test the [restart] function, you should reply N so the program will delete [serversInfo] and start the server program as a new start instead of restart.

We implemented Raft algorithm and integrated it into the streaming platform as the consensus module to solve the consistency problem in the programming assignment P2. 

In the implementation of Raft algorithm. We developed the below Java classes in corresponding java files:LogEntry: defines the data structure of a log entry as well as the operations on the entryRaftData: defines a set of data used in the Raft algorithm as well as the operations on these dataFollowerThread: defines the behavior of a follower CandidateThread: defines the behavior of a candidateLeaderThread: defines the behavior of the leaderIn addition, we add new methods to the already existed class ServerThread of the streaming platform, which is the core module of the streaming platform for the server-server and server-client communication:procReqVote: processes the VoteRequest RPCprocReplyVote: processes the reply to the VoteRequest RPCprocAppend: processes the Append RPCprocReplyAppend: processes the reply to the Append RPCWe also modified the server, ServerThread, client and ClientThread class of the streaming platform to adapt them to the newly added consensus module. 
previous Java files of streaming platform:
- server.java: where main method of the server program located at, receives commands from clients and dispatches the tasks to the server threads
- ServerThread.java: main body of the stream platform, the server threads handle the commands from clients  
- client.java: where main method of the client program located at, receives commands from user and sends them to the servers for processing
- ClientThread.java: client thread to handle messages sent from the servers (to connect to the restarted and newly added servers, disconnect to the deleted servers, display subscribed partitions, etc) 
- Record.java: <key, value> pair structure
- ServerInfo.java: record the server name, ip and port number, info is wrote into local file [serversInfo]
- ClientInfo.java: record the client name, ip and port number, info is wrote into local file [clientsInfo]
- SvrData.java: store the data and info used by the server, the data and info are wrote into local files [server name]_data/info

Files generated by the server programs are stored in [/home/92476/prog/stream] (you can change the path as you like by replace the dir string [localDir] in server.java/client.java/ServerThread.java) of both machines, the program set the file access mode to 777 by calling [Runtime.getRuntime().exec("chmod 777 " + outFileName);]
1. serversInfo: record the name, ip address and port number of the servers added to the stream platform.
2. clientsInfo: record the name, ip address and port number of the clients connected to the stream platform.
3. [server name]_data: record the topics/backup topics data generated by the stream platform, including topic name, partition number, records in each partition
4. [server name]_info: record the relationships among topics, servers, clients.
5. [server name]_log: record the replicated log. 
- [now] now of each partition of each topic (now is the number of records in each partition)
- [offset] offset of each partition of each topic (offset is the current record index of each partition to be accessed by the subscriber when calling [get] command)
- [numSub] number of subscribers of each topic
- [subList] subscribers of each topic
- [partSubMap] subscriber (client name) of each partition of each topic
- [partSvrMap] server name where each partition of each topic locates at
- [svrPartMap] the partitions of topics located on the server